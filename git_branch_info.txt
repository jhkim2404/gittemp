3. 깃과 브런치

  3-1. 브랜치란?

  1. 브랜치가 필요한 이유
    -. 우리가 어떤 제품을 만들때 사용설명서의 버전 관리는 깃으로 하고, 제품출시전에는 개발 순서에 따라 사용설명서를 작성하면 된다.
    -. 하지만, 제품이 출시되고 나면 문제가 생긴다. 고객사마다 추가로 요구하는 내용이 다른며, 요구 사항을 반영하다 보면 고객사에 따라
       제품이 달라질 것이고, 이에 맞춰 사용 설명서도 달라져야 한다.
    -. 먼저 떠오르는 해결책은 처음에 작업했던 저장소 전체를 여러 개 복사해서 각 고객사의 이름을 붙인 다음 저장소마다 버전 관리를 따로 하는 방법이 
       있지만 이 방법은 효율적이지 않다.
    -. 먼저 고객사마다 디렉토리를 복사하면 출시 전까지 만들었던 내용은 동일하기 때문에 자료가 중복된다.
    -. 버전 관리 시스템의 장점 중 하나는 파일 이름을 더럽히지 않는 것인데, 이 방법은 고객사마다 디렉터리 이름을 다르게 사용해야 한다.
    -. 수정한 내용이 의도치 않게 바뀌거나 사라질 겁니다.

  2. 브랜치 기능 살펴보기
    -. git으로 버전 관리를 시작하면 기본적으로 master라는 브랜치가 만들어 진다.
    -. 브랜치는 커밋을 가리키는 포인터와 비슷하다.
    -. 새 브랜치를 만들면 기존에 저장한 파일을 master 브랜치에 그대로 유지하면서 기존 파일 내용을 수정하거나 새로운 기능을 구현할 파일을
      만들 수 있다.
    -. 이렇게 master 브랜치에서 뻗어 나오는 새 브랜치를 만드는 것을 분기(branch)한다 라고 한다.
    -. 새 브랜치에서 원하는 작업을 다 끝냈다면 새 브랜치에 있던 파일을 원래 master 브랜치에 합칠 수 있다.
    -. 이렇게 분기해던 브랜치를 master 브랜치와 합치는 것을 병합(merge)한다 라고 한다.

  3-2. 브랜치 만들기

  1. git에서 브랜치를 만들거나 확인하는 명령은 git branch이다.
    -. master는 특별한 브랜치이다. 저장소 만들때 기본적으로 master가 만들어 진다.
    -. 새로운 브랜치를 만들려면 git branch 명령 다음에 만들려는 브랜치 이름을 적습니다.
    -. master 앞에 * 표시는 아직 우리가 master 브랜치에서 작업하고 있다는 뜻입니다.
    -. 브랜치가 추가된 후에는 커밋 로그 화면도 다르게 나타납니다.
      : 예시 
        $ git log
        commit 1a7d67fee24888938fd5caf4acd132a9adbfc2e4 (HEAD -> master, jhkim2404, jhkim)

  2. 브랜치 사이 이동하기
    -. master 브랜치에 새로운 커밋이 추가되었는데 로그가 어떻게 바뀌었는지 git log 명령에 --oneline 옵션을 추가해서 확인한다.
      : 예시
        $ git log --oneline
        1a7d67f (HEAD -> jhkim, master, jhkim2404) jhkim contents add 2
        85a2e7b jhkim contents add
        8cb2091 jhkim work.txt create
    -. 현재 브랜치에서 다른 브랜치로 이동하려면 git checkout 명령 다음에 브랜치 이름을 사용한다.
    -. 파일 수정 후 커밋을 하고 git log --oneline 명령으로 커밋 로그에 jhkim 브랜치에서 작업한 이력을 확인할 수 있다.
      : 예시
        $ git log --oneline
        19dbbe2 (HEAD -> jhkim) jhkim git checkout jhkim do
    -. jhkim2404 브랜치에서 커밋 로그를 확인 해 보면 jhkim 브랜치에서 작업한 내역을 확인할 수 없다.
      : 예시
        $ git checkout jhkim2404
        Switched to branch 'jhkim2404'

        jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/branch_test (jhkim2404)
        $ git log --oneline
        1a7d67f (HEAD -> jhkim2404, master) jhkim contents add 2
        85a2e7b jhkim contents add
        8cb2091 jhkim work.txt create

        jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/branch_test (jhkim2404)
        $ cat work.txt
        1. work.txt create
        2. contents add 1
        3. contents add 2

  3. 브랜치 정보 확인하기
    
    1. 새브랜치에서 커밋하기
      -. work.txt 파일에 contents 4 라고 텍스트를 추가하고 저장한다.
      -. apple.txt 파일에 contents 4 라고 텍스트를 추가하고 저장한다.
      -. 수정된 2개의 파일을 각각 스테이지에 올릴 수도 있지만 git add 뒤에 마침표(.)를 추가하면 현재 저장소에
         수정된 파일을 한꺼번에 스테이지에 올릴 수 있다.
      -. git add .
         git commit -m "apple contents 3 add " 
         메세지와 함께 커밋한다.
      -. 커밋이 어떻게 저장 되었는지 git log --oneline 명령을 사용해 확인해 본다.
        : 예시
          $ git log --oneline
          217de50 (HEAD -> jhkim)  jhkim txt add
          19dbbe2 jhkim git checkout jhkim doc update
          1a7d67f (jhkim2404) jhkim contents add 2
          85a2e7b jhkim contents add
          8cb2091 jhkim work.txt create
      -. 첫번째 줄에 (HEAD -> jhkim) 이라고 되어 있으니 현재 jhkim 브랜치에 체크아웃 상태이고, 
         jhkim 브랜치의 최신 커밋은 jhkim txt add 이다.
      -. git log 명령을 사용할 때 다음과 같이 --branches 옵션을 사용하면 각 브랜치의 커밋을 함께 볼 수 있다.
        : 예시
          $ git log --oneline --branches
          217de50 (HEAD -> jhkim)  jhkim txt add
          44ac904 (master) apple contents 3 add
          19dbbe2 jhkim git checkout jhkim doc update
          1a7d67f (jhkim2404) jhkim contents add 2
          85a2e7b jhkim contents add
          8cb2091 jhkim work.txt create
      -. 브랜치와 커밋의 관계를 좀 더 쉽게 그래프 형태로 표시하려면 git log 명령에 --graph 옵션을 함께 사용한다.
        : 예시
          $ git log --oneline --branches --graph
          * 217de50 (HEAD -> jhkim)  jhkim txt add
          * 19dbbe2 jhkim git checkout jhkim doc update
          | * 44ac904 (master) apple contents 3 add
          |/
          * 1a7d67f (jhkim2404) jhkim contents add 2
          * 85a2e7b jhkim contents add
          * 8cb2091 jhkim work.txt create
      -. 커밋 내역 왼쪽에 수직선(|) 점선은 커밋과 커밋의 관계를 보여주는 것이다. 
      -. 그래프를 살펴보면 jhkim 브랜치의 최신 커밋은 jhkim txt add 인데 점선을 따라 
         git checkout jhkim doc update 커밋의 부모를 찾아가 보면 jhkim contents add 2 커밋을 만나게 된다.
      -. jhkim contents add 2 커밋 다음에 git checkout jhkim doc update 커밋이 만들어졌다는 뜻이다.
      -. mster 브랜치의 최신 커밋은 apple contents 3 add 이다.
      -. 수직선(|)을 따라가 부모 커밋을 찾아보면 jhkim contents add 2 이다. 
      -. git checkout jhkim doc update 커밋과 apple contents 3 add 커밋은 같은 부모를 가졌다.
    2. 브랜치 사이의 차이점 알아보기
      -. git log master..apple
      -. 브랜치마다 커밋이 쌓여갈수록 브랜치 사이에 어떤 차이가 있는지 일일이 확인하기 어려워진다.
      -. 이럴 때는 브랜치 사이에 마침표 두개(..)를 넣는 명령으로 차이점을 쉽게 확인할 수 있다.
      -. 브랜치 이름과 마침표 사이에는 공백없이 입력하며, 마침표 왼쪽에 있는 브랜치를 기준으로 오른쪽 브랜치와 비교한다.

  4. 브랜치 병합하기
    
    1. 서로 다른 파일 병합하기
      -. 터미널을 창을 열고 홈 디렉토리로 이동합니다.
      -. manual-2라는 깃 저장소를 만들텐데, git init 다음에 디렉토리 이름을 입력하면 새로운 디렉토리를 만들고 저장소를
         초기화하는 과정을 한꺼번에 처리할 수 있습니다.
      -. manual-2 디렉토리로 이동한 수 ls -al 명령을 사용하면 .git/ 디렉토리가 만들어진 것을 확익할 수 있습니다.
        : 예시
          $ git init manual-2
          Initialized empty Git repository in C:/gittemp/manual-2/.git/

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp (master)
          $ cd manual-2/

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-2 (master)
          $ ls -al
          total 8
          drwxr-xr-x 1 jhkim 197609 0 Jul  4 19:52 ./
          drwxr-xr-x 1 jhkim 197609 0 Jul  4 19:52 ../
          drwxr-xr-x 1 jhkim 197609 0 Jul  4 19:52 .git/
      -. work_001.txt 파일을 만들어 내용을 입력하고 커밋 한다.
        : 예시
          $ vi work_001.txt

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-2 (master)
          $ git add work_001.txt
          warning: in the working copy of 'work_001.txt', LF will be replaced by CRLF the next time Git touches it

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-2 (master)
          $ git add work_001.txt

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-2 (master)
          $ git commit -m "work 1"
          [master (root-commit) a251cd7] work 1
           1 file changed, 1 insertion(+)
           create mode 100644 work_001.txt
      -. HEAD ( HEAD가 master를 가리킨다) -> master (master가 work_001.txt을 가리킨다) -> work_001.txt
      -. 이제 'o2' 라는 브랜치를 만든다.
        : git branch o2
      -. HEAD -> master -> work_001.txt -> o2 (o2가 work_001.txt를 가리킨다)
      -. 현재 master 브랜치에서 master.txt 파일을 만들어 내용을 입력하고 커밋 한다.
      -.               HEAD
                          |
                       master ( master가 master work 2 커밋을 가리킴 )
                          |
         work 1 ㅡ master work 2
              |
            o2
       -. 이제 o2 브랜치로 체크아웃 한다.
       -. o2 브랜치에서 o2.txt 파일을 만들어 내용을 입력하고 커밋한다.
       -.
                            master
                               |
           work 1    ㅡ  master work 2
                         |
                         |ㅡㅡㅡㅡㅡㅡ o2 work 2
                                                |
                                               o2  ( o2 브랜치가 work 2 커밋을 가리킴 )
                                                |
                                             HEAD ( HEAD가 o2 브랜치를 가리킴 )
       -. git log --oneline --branches --graph 명령을 사용해서 현재 커밋 상태를 확인해 보세요.
         : 예시
           $ git log --oneline --branches --graph
           * b438bd5 (HEAD -> o2) o2 work 2
           | * fe516d7 (master) master work 2
           |/
           * a251cd7 work 1
      -. o2 브랜치에서 작업이 다 끝났다고 가정하고, o2 브랜치의 내용을 master 브랜치로 병합해 보겠습니다.
      -. 브랜치를 병합하려면 먼저 master 브랜치로 체크아웃해야 합니다.
        : git checkout master
      -. 브랜치를 병합하려면 git merge 명령 뒤에 가져올 브랜치 이름을 적습니다. 
        : git merge o2
      -. 현재 커밋 상태 
        : 예시
          $ git log --oneline --branches --graph
          *   4cdbdd1 (HEAD -> master) Merge branch 'o2'
          |\
          | * b438bd5 (o2) o2 work 2
          * | fe516d7 master work 2
          |/
          * a251cd7 work 1
      -. ls -al 명령으로 확인해 보면 o2 브랜치에 있던 o2.txt 파일이 master 브랜치에 합쳐졌을 것이다.
        : 예시
          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-2 (master)
          $ ls -al
          total 15
          drwxr-xr-x 1 jhkim 197609  0 Jul  4 20:16 ./
          drwxr-xr-x 1 jhkim 197609  0 Jul  4 19:52 ../
          drwxr-xr-x 1 jhkim 197609  0 Jul  4 20:16 .git/
          -rw-r--r-- 1 jhkim 197609 19 Jul  4 20:15 master.txt
          -rw-r--r-- 1 jhkim 197609 18 Jul  4 20:16 o2.txt
          -rw-r--r-- 1 jhkim 197609 16 Jul  4 19:56 work_001.txt

    2. 같은 문서의 다른 위치를 수정했을 때 병합하기
      -. 홈 디렉토리로 이동한 후 manual-3라는 깃 저장소를 만들고 manual-3 디렉토리로 이동한다.
        : 예시
          $ mkdir manual-3
          $ git init manual-3
          $ cd manual-3
      -. work.txt 파일을 만들고 내용을 입력한다.
        : 예시
          $ vi work.txt
          $ cat work.txt
          #title
          contents


          #title
          contents
      -. work.txt 파일을 스테이지에 올리고 커밋한다.
        : 예시
          $ git add work.txt
          $ git commit -m "work 1"
          [master (root-commit) e1e9123] work 1
           1 file changed, 6 insertions(+)
           create mode 100644 work.txt
      -. o2라는 브랜치를 만든다.
        : git branch o2
      -. master 브랜치에서 먼저 파일을 수정하고 커밋한다.
        : 예시
          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-3 (master)
          $ vi work.txt

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-3 (master)
          $ cat work.txt
          #title
          contents
          master contents 2

          #title
          contents

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-3 (master)
          $ git commit -am "master work 2"
          warning: in the working copy of 'work.txt', LF will be replaced by CRLF the next time Git touches it
          [master c80f72a] master work 2
           1 file changed, 1 insertion(+), 1 deletion(-)
      -. o2 브랜치에서 work.txt 파일을 수정하고 커밋한다.
        : 예시
          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-3 (master)
          $ git checkout o2
          Switched to branch 'o2'

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-3 (o2)
          $ vi work.txt

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-3 (o2)
          $ cat work.txt
          #title
          contents


          #title
          contents
          o2 contens 2

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-3 (o2)
          $ git commit -am "o2 work 2"
          [o2 91de057] o2 work 2
           1 file changed, 1 insertion(+)
      -. master 브랜치와 o2 브랜치 양쪽에서 work.txt 파일을 수정했지만 문서 안의 수정 위치는 다르다.
      -. o2 브랜치를 master 브랜치에 합치기 위해 master 브랜치로 체크아웃 한다.
        : git checkout master 
      -. git merge 명령어를 사용하여 o2 브랜치를 master 브랜치로 끌어 옵니다
        : git merge o2
      -. cat work.txt 파일의 내용을 보면 병합되어 있음을 확인할 수 있다.
        : 예시
          $ cat work.txt
          #title
          contents
          master contents 2

          #title
          contents
          o2 contens 2
    3. 같은 문서의 같은 위치를 수정했을 때 병합하기
      -. maual-4 폴더를 만들고, work.txt 만들어 커밋한다. o2 브랜치를 만든다.
        : 예시
          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-3 (master)
          $ pwd
          /c/gittemp/manual-3

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-3 (master)
          $ cd ..

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp (master)
          $ ls -al
          total 65
          drwxr-xr-x 1 jhkim 197609     0 Jul  4 20:27 ./
          drwxr-xr-x 1 jhkim 197609     0 Jul  4 09:09 ../
          drwxr-xr-x 1 jhkim 197609     0 Jul  3 16:44 .git/
          drwxr-xr-x 1 jhkim 197609     0 Jul  4 19:32 branch_test/
          -rw-r--r-- 1 jhkim 197609 15374 Jul  4 20:41 git_branch_info.txt
          -rw-r--r-- 1 jhkim 197609 14045 Jul  3 15:48 git_info.txt
          -rw-r--r-- 1 jhkim 197609    28 Jul  3 15:45 hello.txt
          drwxr-xr-x 1 jhkim 197609     0 Jul  4 20:16 manual-2/
          drwxr-xr-x 1 jhkim 197609     0 Jul  4 20:38 manual-3/

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp (master)
          $ mkdir manual-4

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp (master)
          $ git init manual-4
          Initialized empty Git repository in C:/gittemp/manual-4/.git/

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp (master)
          $ cd manual-4

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (master)
          $ ls

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (master)
          $ ls -al
          total 8
          drwxr-xr-x 1 jhkim 197609 0 Jul  4 20:41 ./
          drwxr-xr-x 1 jhkim 197609 0 Jul  4 20:41 ../
          drwxr-xr-x 1 jhkim 197609 0 Jul  4 20:41 .git/
          
          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (master)
          $ vi work.txt

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (master)
          $ git add work.txt
          warning: in the working copy of 'work.txt', LF will be replaced by CRLF the next time Git touches it

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (master)
          $ git add work.txt

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (master)
          $ git commit -m "work 1"
          [master (root-commit) 431eb4e] work 1
           1 file changed, 5 insertions(+)
           create mode 100644 work.txt

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (master)
          $ git branch o2

      -. master 브랜치에서 work.txt 파일에 master contents 2 을 입력하고 커밋 한다.
      -. o2 브랜치에서 동일 위치에서 o2 contens 2 을 입력하고 커밋한다.
      -. o2 브랜치를 master 브랜치로 병합한다.
      -. 자동 병합하는 동안 충돌(conflict)이 발생한다.
      -. 충돌이 생긴 work.txt는 자동으로 병합할 수 없으므로 충돌부분을 해결한다.
        : 예시
          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (master)
          $ vi work.txt

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (master)
          $ git commit -am "master work 2"
          warning: in the working copy of 'work.txt', LF will be replaced by CRLF the next time Git touches it
          [master 18d0c8d] master work 2
           1 file changed, 1 insertion(+), 1 deletion(-)

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (master)
          $ git checkout o2
          Switched to branch 'o2'

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (o2)
          $ vi work.txt

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (o2)
          $ git commit -am "o2 work 2"
          [o2 6b82b82] o2 work 2
           1 file changed, 1 insertion(+), 1 deletion(-)

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (o2)
          $ git checkout master
          Switched to branch 'master'

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (master)
          $ git merge o2
          Auto-merging work.txt
          CONFLICT (content): Merge conflict in work.txt
          Automatic merge failed; fix conflicts and then commit the result.

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/manual-4 (master|MERGING)
          $ cat work.txt
          #title
          contents
          <<<<<<< HEAD
          master contents 2
          =======
          o2 contens 2
          >>>>>>> o2
          #title
          contents
      -. 양쪽 브랜치 내용을 확인하면서 직접 수정한다.
         <<<<<<< HEAD
         =======
         >>>>>>> o2 부분을 직접 삭제하여 수정한다.
      -. 수정한 파일은 커밋한다.
        : $ git commit -am "merge o2 branch"
      -. glt log 명령에 --oneline --branches --graph 옵션을 사용하면 지금까지 만든 브랜치와 
        커밋의 관계를 확인할 수 있다.
        : 예시
          $ git log --oneline --branches --graph
          *   b897d77 (HEAD -> master) merge o2 branch
          |\
          | * 6b82b82 (o2) o2 work 2
          * | 18d0c8d master work 2
          |/
          * 431eb4e work 1
    4. 병합이 끝난 브랜치 삭제하기
      -. 브랜치를 병합한 후 더 이상 사용하지 않는 브랜치는 깃에서 삭제할 수 있다.
      -. 브랜치를 삭제하더라도 이 브랜치가 완전히 지워지는 것이 아니라 다시 같은 이름의 브랜치를 만들면
        예전 내용을 다시 볼 수 있다.
      -. git branch를 이용하여 현재 브랜치를 확인한다.
        : 예시
          $ git branch
          * master
            o2
      -. 브랜치를 삭제하려면 master 브랜치에서 해야 한다.
        : git checkout master
      -. 브랜치를 삭제할 때는 git branch 명령에 -d 옵션을 사용한다.
        : 예시
          $ git branch -d o2
          Deleted branch o2 (was 6b82b82).

          $ git log --oneline --branches --graph
          *   b897d77 (HEAD -> master) merge o2 branch
          |\
          | * 6b82b82 o2 work 2
          * | 18d0c8d master work 2
          |/
          * 431eb4e work 1

  5. 브랜치 관리하기
    
    1. 브랜치에서 checkout과 reset의 작동원리
      -. test 폴더 생성 > c1.txt 파일 추가 > 스테이징 > 커밋 한다.
      -. git log 명령을 실행해 보면 첫번째 줄에 (HEAD -> master ) 표시가 있는데, HEAD는 현재 작업 트리가 어떤 버전을
        기반으로 작업중인지 가리키는 포인터이다.
      -. HEAD는 기본적으로 master 브랜치를 가리킨다.
      -. 그리고 브랜치는 기본적으로 브랜치에 담긴 커밋중 가장 최근의 커밋을 가리킨다. 
        : 예시
          $ git log --oneline
          da78ae4 (HEAD -> master) c1
      -. sub 브랜치를 생성, c2.txt 생성후 커밋 한다.
        : 예시
          $ git log --oneline
          26c40b1 (HEAD -> master) c2
          da78ae4 (sub) c1
      -. sub 브랜치로 checkout > s1.txt 파일 커밋 한다.
        : 예시
          $ git log --oneline
          6af70ed (HEAD -> sub) s1
          da78ae4 c1
      -. 브랜치가 여러 개일 때 reset 명령은 어떻게 작동하는가?
      -. reset 명령으로 master 브랜치에 있던 여러 커밋 중 하나를 골라서 되돌아 갔다.
      -. 브랜치가 여러 개일 때는 현재 브랜치가 아닌 다른 브랜치에 있는 커밋을 골라서
         최신 커밋으로 지정할 수 있다.
      -. sub 브랜치에 있는 상태에서 master 브랜치에 있는 c2 커밋을 sub 브랜치의 최신 커밋으로 지정할 수 있다.
        : 예시
          $ git reset 26c40b1
          Unstaged changes after reset:
          D       c2.txt
 
          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/test (sub)
          $ git log --oneline --branches --graph
          * 26c40b1 (HEAD -> sub, master) c2
          * da78ae4 c1
      -. HEAD는 그대로 sub 브랜치를 가리키고 있다.
      -. 이렇게 git reset 명령을 사용하면 현재 브랜치가 가리키는 커밋을 여러 브랜치 사이를 넘나들면서 제어할 수 있다.
      -. 이제 sub 브랜치는 c2 커밋을 가리키고 있기 때문에 원래 가리키고 있던 s1 커밋은 연결이 끊어지면서 삭제 된다.
      -. 정리
         : git reset 명령을 사용하면 HEAD를 제어해서 브랜치를 이동할 수 있다.
         : git reset 명령을 사용하면 HEAD가 가리키고 있는 브랜치의 초신 커밋을 원하는 커밋으로 지정할 수 있다.
         : 이때, 어떤 브랜치에 있는 커밋이든 지정할 수 있으며, 명령을 수행한 뒤 브랜치와 연결이 끊긴 커밋은 삭제된다.
    2. 수정 중인 파일 감추기 및 되돌리기 - git stash
      -. 브랜치에서 파일을 수정하고 커밋하지 않은 상태에서 급하게 다른 파일을 커밋해야 할 경우가 있다.
      -. 커밋하지 않은 파일들을 그냥 두어도 상관없지만 계속 커밋하라는 메시지가 나타나기 때문이다.
      -. 실수로 다른 파일과 함께 커밋이 될 수도 있고, 아직 커밋하지 않고 작업 중인 파일들을 잠시 감춰둘 수 있다.
      -. 그리고 당장 필요한 자업들을 끝낸 후 다시 감춰둔 파일들을 꺼내오면 된다.
      -. f1.txt, f2.txt 파일을 만들고 커밋 후 다시 수정한다.
      -. git stash 명령을 사용하여 수정내역을 삭제한다.
        : 예시
          $ git status
          On branch master
          Changes not staged for commit:
            (use "git add <file>..." to update what will be committed)
            (use "git restore <file>..." to discard changes in working directory)
                  modified:   f1.txt
                  modified:   f2.txt

          no changes added to commit (use "git add" and/or "git commit -a")

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/st (master)
          $ git stash
          warning: in the working copy of 'f1.txt', LF will be replaced by CRLF the next time Git touches it
          warning: in the working copy of 'f2.txt', LF will be replaced by CRLF the next time Git touches it
          Saved working directory and index state WIP on master: 800599f f2

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp/st (master)
          $ git status
          On branch master
          nothing to commit, working tree clean
      -. 이렇게 감춘 파일은 stash list 목록에서 확인할 수 있다.
      -. 가장 먼저 감춘 것은 stash@{0}에 담긴다.
      -. 앞으로 다른 파일이 추가 되면 기존 파일은 stash@{1}로 옯겨진다.  
      -. 가장 최근에 보관한 것이 stash@{0}에 담긴다. 
      -. 먼저 감춘 것을 아래에, 가장 최근에 감춘 것을 위에 쌓기 때문에 stash 스택(stack)이라고 표현한다.
        : 예시
          $ git stash list
          stash@{0}: WIP on master: 800599f f2
          stash@{1}: WIP on master: 800599f f2
       -. 급한 작업을 모두 마쳤다면 감춰둔 파일을 꺼내와 계속 수정하거나 커밋할 수 있다.
       -. git stash 명령 뒤에 pop를 추가하면 stash 목록에서 가장 최근 항목을 되돌린다.
          : 예시
            $ git stash pop
            On branch master
            Changes not staged for commit:
              (use "git add <file>..." to update what will be committed)
              (use "git restore <file>..." to discard changes in working directory)
                    modified:   f1.txt

            no changes added to commit (use "git add" and/or "git commit -a")
            Dropped refs/stash@{0} (6cdf29371d022e2933db93fcf60a4b07bd01d5a8)


