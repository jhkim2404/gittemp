4. 깃허브로 백업하기

  4.1 원격 저장소와 깃허브

    1. 원격저장소란?
    2. 깃허브로 할 수 있는 일들
      -. 원격 저장소에서 깃을 사용할 수 있습니다.
      -. 지역 저장소를 백업할 수 있습니다.
      -. 자신의 개발 이력을 남길 수 있습니다.
      -. 다른 사람의 소소를 살펴볼 수 있고, 오픈 소스에 참여할 수도 있습니다.

  4.2 깃허브 시작하기

    깃허브에 원격 저장소를 만들기 위해서는 먼저 깃허브에 가입해야 합니다. 깃허브에 가입하고 저장소를 만드는 방법을 알아보겠습니다.
   저장소는 필요할 때마다 얼마든지 만들 수 있고, 사용하지 않는 저장소는 삭제할 수 있습니다.

    1. 깃허브에 가입하기
    2. 깃허브에 원격 저장소 만들기
  
  4.3 지역 저장소를 원격 저장소에 연결하기

    원격 저장소를 만들었으니 이제 지역 저장소에서 한 작업을 원격 저장소로 올리거나 원격 저장소에 있는 파일을 지역
    저장소에 있는 파일을 지역 저장소로 내려받아 작업해 보겠습니다. 이를 위해서는 먼저 지역 저장소와 원격 저장소를 연결해야 합니다.

    1. 지역 저장소 만들기
      -. local-git을 줄인 loc-git 이라는 새 디렉토리를 만들고 지역 저장소로 초기화하겠습니다.
        : git init loc-git
        : cd loc-git
        : vi fi.txt 
        : git add fi.txt
        : git commit -m "add a"
        : git log

    2. 원격 저장소에 연결하기
      -. 사용자 컴퓨터에 잇는 지역 저장소를 깃허브에 있는 원격 저장소와 연결해 보겠습니다. 깃허브 저장소 화면에서 알려준
        여러 가지 접속 방법 중 '커맨드 라인에서 기존 저장소를 푸시하기' 방법을 사용해서 지역 저장소에 있는 파일을 원격 저장소에
        있는 파일을 원격 저장소로 올려 보겠습니다.
        : git remote add origin https://github.com/jhkim2404/gittemp.git
        : git branch -M main
        : git push -u origin main
      -. 원격 저장소(remote)에 제대로 연결됐는지 확인해 보겠습니다.
         다음과 같이 git remote 명령에 -v 옵션을 붙여서 입력해 보겠습니다.
        : 예시
          $ git remote -v
          origin  https://github.com/jhkim2404/gittemp.git (fetch)
          origin  https://github.com/jhkim2404/gittemp.git (push)

  4.4 원격 저장소에 올리기 및 내려받기

    1. 원격 저장소에 파일 올리기 - git push
      -. 먼저 지역 저장소의 커밋을 원격 저장소로 보내는 푸시를 알아보겠습니다. 원격 저장소에 처음 접속할 때 나타나는 
        내용 중 두번째 항목이 바로 푸시하라는 명령입니다. 직접 사용해 보겠습니다.
      -. 터미널 창에서 다음과 같이 입력하세요. 지역 저장소의 브랜치를 origin, 즉 원격 저장소의 master 브랜치로 푸시하라는 명령입니다.
        여기에서 '-u' 옵션은 지역 저장소의 브랜치를 원격 저장소의 master 브랜치에 연결하기 위한 것으로 처음에 한 번만 사용하면 됩니다.
        : 예시
         $ git push -u origin master
         error: src refspec master does not match any
         error: failed to push some refs to 'https://github.com/jhkim2404/gittemp.git'
      -. error: src refspec master does not match any 에러 발생의 원인 push 명령어 뒤에 master 브랜치를 추가 해서이다.
         저장소는 origin이 맞지만 브랜치는 없기 때문이다. 
        : 예시 
         $ git push -u origin
         Enumerating objects: 12, done.
         Counting objects: 100% (12/12), done.
         Delta compression using up to 12 threads
         Compressing objects: 100% (10/10), done.
         Writing objects: 100% (10/10), 1.94 KiB | 991.00 KiB/s, done.
         Total 10 (delta 5), reused 0 (delta 0), pack-reused 0
         remote: Resolving deltas: 100% (5/5), completed with 1 local object.
         To https://github.com/jhkim2404/gittemp.git
            b3a719a..e24d8d1  main -> main
         branch 'main' set up to track 'origin/main'.

    2. 깃허브 사이트에서 직접 커밋하기

    3. 원격 저장소에서 파일 내려받기 - git pull
      -. 원격 저장소에 있는 소스 파일을 다른 사용자가 수정했거나 깃허브 사이트에서 직접 커밋하면 지역 저장소와 차이가 생깁니다.
        이럴 때는 원격 저장소와 지역 저장소의 상태를 같게 만들기 위해 원격 저장소의 소소를 지역 저장소로 가져옵니다.
        이것을 'PULL 한다' 라고 합니다.
      -. 다은 명령은 origin(원격 저장소)의 내용을 master 브랜치로 가져온다는 뜻입니다.
        : 예시

          $ git pull origin master
          fatal: couldn't find remote ref master

          jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp (main)
          $ git pull origin
          remote: Enumerating objects: 5, done.
          remote: Counting objects: 100% (5/5), done.
          remote: Compressing objects: 100% (3/3), done.
          remote: Total 3 (delta 2), reused 0 (delta 0), pack-reused 0
          Unpacking objects: 100% (3/3), 778 bytes | 86.00 KiB/s, done.
          From https://github.com/jhkim2404/gittemp
             975bce6..ca1acac  main       -> origin/main
          Updating 975bce6..ca1acac
          Fast-forward
           git_github_info.txt | 3 ++-
           1 file changed, 2 insertions(+), 1 deletion(-)

  4.5 깃허브에 SSH 원격 접속하기

    1. SSH 원격 접속이란?
      -. SSH는 Secure Shell의 줄임말로 보안이 강화된 안전한 방법으로 정보를 교환하는 방식입니다. SSH에서는 기본적으로
        프라이빗 키(Private Key)와 퍼블릭 키(Public Key)를 한 쌍으로 묶어서 컴퓨터를 인증합니다. private은 '사적인, 비밀의, 비공개의'라는 뜻을
        public은 '공적인,공개의'라는 뜻을 가지고 있습니다. 퍼블릭 키는 말 그대로 외부에 공개되는 키이고, 프라이빗 키는 아무도 알 수 없게 사용자 
        컴퓨터에 저장되는 키입니다. 사용자 컴퓨터에서 SSH키 생성기를 실행하면 프라이빗 키와 퍼블릭 키가 만들어 집니다.
      -. 일반적으로 깃허브의 원격 저장소에 파일을 올리는 등의 작업을 하기 위해서는 아이디와 비밀번호를 입력해서 깃허브에게 내가 해당 저장소를 만든 계정의
        주인임을 인증해야 합니다.
      -. 웹 브라우저에서 깃허브 저장소에 접속할 때나 SourceTree 같은 프로그램을 사용해 깃허브 저장소에 접속할 때 이런 방법을 사용합니다.
      -. 이에 비해 SSH 원격 접속은 프라이빗 키와 퍼블릭 키를 사용해 현재 사요하고 있는 기기를 깃허브에 인증하는 방법입니다.
      -. 예를 들어 서버환경에서 깃허브 저상소에 접속해야 한다면 서버 자체를 깃허브에 등록하고, 개인 노트북으로 접속한다면 노트북을 깃허브에 등록해 둡니다.
        이렇게 하면 터미널 창을 이용할 수 있는 상태라면 언제 어디서든 깃허브에 접속할 수 있습니다.
      -. 또 터미널 창에서 깃허브를 사용하다 보면 아이디와 비밀번호를 요구하는 경우가 많은데, SSH 접속 방법을 사용하면 자동 로그인 기능을 통해 이러한 번거로움을 줄일 수 있습니다.
 
    2. SSH 키 생성하기
      -. 사용자 컴퓨터에서 SSH키 생성기를 사용하면 프라이빗 키와 퍼블릭 키가 만들어 진다고 했습니다. 이 키들이 어디에 저장되고 어떤 용도로 사용되는지 알아 보겠습니다.
      -. 터미널 창에서 홈 디렉토리로 이동합니다. 그리고 ssh-keygen 이라고 입력합니다. 화면에 SSH키가 저장되는 디렉토리 경로가 표시되면서 파일 이름을 입력하라고 합니다.
         SSH 키가 저장되는 디렉토리는 홈 디렉토리 안에 있는 ssh 디렉토리임을 확인할 수 있습니다.
      -. 두번더 enter를 누르면 화면에 SSH를 통해서 다른 컴퓨터에 접속할 수 있는 비밀번호가 생성됩니다. 실제로 내부를 들여다보면 굉장히 복잡한 비밀번호이기 때문에 외부에서
         쉽게 공격할 수 없습니다. 화면에는 몇 가지 파일 경로가 표시되는데 그중에 id_rsa 파일이 프라이빗 키이고, id_rsa.pub 파일이 퍼블릭 키입니다.
      -. 예시

         $ ssh-keygen
         Generating public/private rsa key pair.
         Enter file in which to save the key (/c/Users/jhkim/.ssh/id_rsa):
         Created directory '/c/Users/jhkim/.ssh'.
         Enter passphrase (empty for no passphrase):
         Enter same passphrase again:
         Your identification has been saved in /c/Users/jhkim/.ssh/id_rsa
         Your public key has been saved in /c/Users/jhkim/.ssh/id_rsa.pub
         The key fingerprint is:
         SHA256:7kN1OIwO8mG706e0LsnD15HH8kuXlFMi3zrVE2ks92E jhkim@DESKTOP-HVM9KTK
         The key's randomart image is:
         +---[RSA 3072]----+
         |                 |
         |              . .|
         |         o ....E.|
         |    . + . = .o===|
         |     + =S. =  =.=|
         |      o.o + o. =.|
         |     o =o. =. =  |
         |      Oo+.o... . |
         |       *=+  ..   |
         +----[SHA256]-----+
         
         jhkim@DESKTOP-HVM9KTK MINGW64 /c/gittemp (main)
         $

      -. 정말 이 키들이 .ssh 디렉토리에 저장되었는지 확인해 보겠습니다.
      -. .ssh 디렉토리는 홈 디렉토리 하위에 만들어지므로 창에 다음과 같이 .ssh 디렉토리로 한 번에 이동한 후 그안의 내용을 살펴봅니다.
        : 예시

          $ cd ~/.ssh/

          jhkim@DESKTOP-HVM9KTK MINGW64 ~/.ssh
          $ ls -al
          total 21
          drwxr-xr-x 1 jhkim 197609    0 Jul  9 10:06 ./
          drwxr-xr-x 1 jhkim 197609    0 Jul  9 10:06 ../
          -rw-r--r-- 1 jhkim 197609 2610 Jul  9 10:06 id_rsa
          -rw-r--r-- 1 jhkim 197609  575 Jul  9 10:06 id_rsa.pub


    3. 깃허브에 퍼블릭 키 전송하기
      -. 앞에서 만든 키를 사용해 보기 전에 SSH 방식으로 깃허브 저장소에 접속하는 과정을 간단히 살펴보겠습니다.
      -. SSH 방식으로 접근하려면 먼저 사용자 컴퓨터에 만들어져 있는 퍼블릭 키를 깃허브 서버로 전송한 다음 저장합니다.
      -. 사용 컴퓨터에서 깃허브 저장소에 접속하면 사용자 컴퓨터에 있는 프라이빗 키와 깃허브 서버에 있는 퍼블릭 키를 비교합니다.
      -. 퍼블릭 키와 프라이빗 키는 한 쌍이므로 두개의 키가 서로 맞으면 사용 컴퓨터와 깃허브 저장소가 연결됩니다.
      -. 접속 과정을 간단히 알아봤으니 이제부터 직접 SSH 방식을 사용해서 깃허브에 접속해 보겠습니다.
      
      1) SSH 키를 만들면 먼저 퍼블릭 키를 깃허브에 올려야 합니다.
      2) 퍼블릭 키가 담겨 있는 id_rsa.pub 파일의 내용을 확인해 보겠습니다.
        : 예시

        jhkim@DESKTOP-HVM9KTK MINGW64 ~/.ssh
        $ cat id_rsa.pub
        ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC3rNs6UIxTQc2Me5UaCxm/lbaqfdvx+bKvMqGGedo/g55KyHzU9bU02Si/1jfuDBow1XIX1AoNitZTffbzrwL0pl0kCKDbaRUiIVSxZqHXHPgZ6Vuynoi6hxdJ+NFKlFGQ8oCm0Z9YkKfFWb9xAAOh2BeEjBCDQMP5yVZsK4ioSjGIZFkmDFUmBz9n0P1+ZHnLl0cjtl29GlrPtCtIqkU84uXwa4ZOEe1W+Rt3ZWxKNtcbPmTiFHaHx6bCTTQG6fJgI7jgXMij+SxNaB12WtOs1n/aoHqFhIVvnKlxijb+8c1/+enWqGNmuyCXuJ+YINhthGtcdf5+R0SqQHNZEsvT3nFW8sHuG8PcYgGOVk6QYG5L1/NZ00j9UJ+9fItDFjz7uH4Cu794w6Dvk65utAozxkI2tvqqnoAd5N0v+rTPGDvN82u6D4aOMeW8vA+r8fpNsRZEfhGSzEB7InXIIsl9JobEptL21J4+gNMYuEo5k6mrdiP3dghZDqGp3R1Z72k= jhkim@DESKTOP-HVM9KTK

      3) 웹브라우저에서 깃허브에 접속한 후 로그인합니다. 그리고 오른쪽 위에 있는 사용자 아이콘을 누른후 [setting]를 선택합니다.
      4) 여러 설정 메뉴 중 [SSH and GPG keys]를 누른 후 퍼블릭 키를 추가하기 위해 화면 오른쪽에 나타난 [New SSH key]를 누릅니다.
      5) SSH 중 퍼블릭 키는 여러 개를 등록할 수 있기 때문에 Title 항목에 현재 등록하는 SSH 퍼블릭 키를 쉽게 알아볼 수 있도록 제목을 붙입니다.
      6) Key 항목에 앞에서 복사한 퍼블릭 값을 붙여 넣습니다.
      7) Key 항목에 ssh-rsa로 시작하는 키 값을 입력했다면 [Add SSH key] 버튼을 눌러서 SSH 키를 추가합니다.
      8) 퍼블릭 키를 추가할 때 비밀번호를 한번 확인합니다.
      9) 깃허브 비밀번호를 입력한 수 [Confirm password]를 누릅니다.
      10) 만들었던 SSH키 중에서 퍼블릭 키를 깃허브 서버에 올렸습니다.
      11) 이제 SSH 키를 만들었던 컴퓨터는 깃허브 저장소의 SSH 주소만 알고 있으면 로그인 정보를 입력하지 않고도 즉시 그 저상소에 접속할 수 있습니다.

   4. SSH 주소로 원격 저장소 연결하기
    
    -. SSH 원격 접속 준비가 끝났습니다. 이제 SSH 주소를 사용해 지역 저장소와 원격 저장소를 연결해 보겠습니다.
    
    1. 깃허브 사이트에서 화면 오른쪽 위에 있는 [+]를 누른후 [New repository]를 선택합니다.
    2. 저장소 이름을 입력한 후 [Create repository]를 눌러서 저장소를 만듭니다.
    3. 저장소가 만들어지면 HTTPS 주소가 나타납니다.
    4. 우리는 SSH 방식으로 접근할 것이므로 [SSH]를 눌러서 SSH 주소를 표시합니다.
    5. 그리고 복사 아이콘을 눌러서 SSH 주소를 복사합니다.
    6. 이제 SSH 방식으로 접속해 보겠습니다.
    7. 홈 디렉토리에 connect-ssh 저장소를 만든 후 해당 디렉토리로 이동합니다
    8. SSH 주소를 사용해 원격 저장소에 연결하는 방법은 HTTPS 주소를 사용할 때와 같습니다.
    9. git remote add origin 명령 뒤에 복사한 주소를 붙여 놓습니다.
      : git remote add origin git@github.com:jhkim2404/gittemp.git
      : error: remote origin already exists. 오류 메세지 발생 git remote rm origin 명령으로 삭제 후 다시 등록한다.
    10. 오류 메세지 없이 프롬프트($)가 표시되면 정상적으로 연결된 것입니다.
    11. 